//
//  ViewController.swift
//  tableView
//
//  Created by Hua Zuo on 11/1/21.
//  Copyright Â© 2021 Hua Zuo. All rights reserved.
//

import UIKit
struct Person {
    let name : String
    let birth_year : String
    
}
class ViewController: UIViewController {

    @IBOutlet weak var tableView: UITableView!
    var people:[Person] = [];
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        tableView.delegate = self
        tableView.dataSource = self
        
        //make a network call
        let url = URL(string:"https://swapi.dev/api/people")
        
        let request = URLRequest(url: url!)
        //let params = [:] as Dictionary<String, String>
        //request.httpMethod = "GET"
        //request.httpBody = try? JSONSerialization.data(withJSONObject: params, options: [])
        //request.addValue("application/json", forHTTPHeaderField: "Content-Type")
        let session = URLSession.shared
        let task = session.dataTask(with: request, completionHandler: {data,response, error ->
            Void in
            print(response!)
            do {
                let json = try JSONSerialization.jsonObject(with: data!) as! Dictionary<String, AnyObject>
                
                //from json response
                //get results array
                let peopleArray = json["results"] as? [Dictionary<String, AnyObject>] // array from network via REST API
                print("results are", peopleArray)
                //reset people
                self.people = []
                
                // assign the response rray, into local variable
                if (peopleArray != nil) {
                    //loop through response array
                    for p in peopleArray! {
                        // from each network object, retrieve value
                        let name = p["name"] as? String
                        let birthyear = p["birth_year"] as? String
                        
                        //create new person struct, based on given network value
                        self.people.append(Person(name: name ?? "Unknown", birth_year:birthyear ?? "Unknown"))
                    }
                }
               // self.people = peopleArray ?? []
                //reload table
                DispatchQueue.main.async {
                    self.tableView.reloadData()
                }
                
                
            } catch{
                print("error")
            }
            
            
            
        })
        task.resume()
    
        
    }

}

extension ViewController: UITableViewDelegate {
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        print("The row is tapped!")
    }
}

extension ViewController: UITableViewDataSource {
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        people.count
        
    }
    
//    func numberOfSections(in tableView: UITableView) -> Int {
//        1
//    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "cell", for: indexPath)
        //retrieve individual person
        let person = self.people[indexPath.row]
        
        //Display data in lable
        cell.textLabel?.text = person.name
        cell.detailTextLabel?.text = person.birth_year
        return cell
    }
    
    
}

